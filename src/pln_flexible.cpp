// [[Rcpp::depends(Rcpp)]]
#include <Rcpp.h>
#include <vector>

// Self-contained Gauss-Hermite Quadrature nodes and weights (K=100)
// These are for the "probabilist's" form of the integral, approximating:
// integral[ f(x) * phi(x) * dx ] from -inf to +inf
// where phi(x) is the standard normal PDF. The sqrt(2) transform is not needed.
// The nodes and weights were generated in R using:
// statmod::gauss.quad.prob(100, "normal")
namespace {
const std::vector<double> gh_nodes = {
  -18.9596362173877, -18.1355915268824, -17.455587403854, -16.8504421964676, 
  -16.2937419175273, -15.7718815351637, -15.2767036621515, -14.802835582737, 
  -14.346503542605, -13.9049293110711, -13.475992702828, -13.058029050047, 
  -12.6497008023541, -12.2499124581996, -11.8577521295249, -11.4724501687711, 
  -11.0933491138326, -10.7198813666273, -10.3515522931656, -9.98792721008518, 
  -9.62862121253309, -9.27329111583167, -8.92162899431709, -8.57335694397048, 
  -8.22822279463978, -7.8859965675521, -7.54646752387824, -7.20944168649436, 
  -6.8747397438814, -6.54219526508363, -6.21165316971259, -5.88296840846386, 
  -5.55600481844511, -5.23063412446999, -4.90673506283805, -4.5841926083521, 
  -4.26289728868535, -3.94274457289709, -3.62363432305514, -3.30547029966928, 
  -2.98815971305719, -2.67161281391901, -2.35574251734131, -2.04046405522349, 
  -1.72569465275292, -1.41135322507227, -1.09736009070381, -0.78363669863524, 
  -0.470105366242464, -0.156689025434774, 0.156689025434773, 0.470105366242464, 
  0.78363669863524, 1.09736009070381, 1.41135322507227, 1.72569465275292, 
  2.04046405522349, 2.35574251734131, 2.67161281391901, 2.98815971305719, 
  3.30547029966928, 3.62363432305513, 3.94274457289709, 4.26289728868534, 
  4.58419260835209, 4.90673506283805, 5.23063412446999, 5.55600481844511, 
  5.88296840846386, 6.21165316971259, 6.54219526508362, 6.87473974388141, 
  7.20944168649435, 7.54646752387824, 7.8859965675521, 8.22822279463979, 
  8.57335694397047, 8.9216289943171, 9.27329111583166, 9.6286212125331, 
  9.98792721008519, 10.3515522931656, 10.7198813666273, 11.0933491138326, 
  11.4724501687711, 11.8577521295249, 12.2499124581996, 12.6497008023541, 
  13.058029050047, 13.475992702828, 13.9049293110711, 14.346503542605, 
  14.802835582737, 15.2767036621515, 15.7718815351637, 16.2937419175273, 
  16.8504421964676, 17.455587403854, 18.1355915268824, 18.9596362173877
};
  const std::vector<double> gh_weights = {
    3.33327034834364e-79, 1.11306738613885e-72, 1.73941284193573e-67, 
    5.08855127544555e-63, 4.80626509819155e-59, 1.95180141627271e-55, 
    4.05738601306235e-52, 4.85065602719768e-49, 3.62250627967993e-46, 
    1.79706674800514e-43, 6.20874096187003e-41, 1.55083579916796e-38, 
    2.88652514240145e-36, 4.10423808392577e-34, 4.55156238600391e-32, 
    4.00676848243813e-30, 2.84226930006646e-28, 1.64593852253976e-26, 
    7.86955059707837e-25, 3.13747348559632e-23, 1.05221226164927e-21, 
    2.99151155919975e-20, 7.26017729862919e-19, 1.51343413730626e-17, 
    2.72494277875585e-16, 4.25900898579607e-15, 5.80480522426787e-14, 
    6.92756267692264e-13, 7.26621923089099e-12, 6.72119409100796e-11, 
    5.4996756326782e-10, 3.99212497424115e-09, 2.57728995660512e-08, 
    1.48330941446547e-07, 7.6266987623953e-07, 3.51011949597411e-06, 
    1.44862216702747e-05, 5.3694841045869e-05, 0.000179012825005967, 
    0.000537499009106448, 0.00145519910644858, 0.00355608710623861, 
    0.00785107336539261, 0.0156726943111899, 0.0283086708586488, 
    0.0462927863251873, 0.0685704661828085, 0.0920362639734975, 
    0.11197067283461, 0.123496941528611, 0.12349694152861, 0.111970672834611, 
    0.0920362639734978, 0.0685704661828074, 0.0462927863251874, 
    0.0283086708586488, 0.0156726943111898, 0.00785107336539253, 
    0.00355608710623863, 0.00145519910644858, 0.000537499009106451, 
    0.000179012825005968, 5.36948410458693e-05, 1.44862216702748e-05, 
    3.51011949597406e-06, 7.62669876239521e-07, 1.48330941446546e-07, 
    2.57728995660522e-08, 3.99212497424108e-09, 5.49967563267801e-10, 
    6.72119409100833e-11, 7.26621923089017e-12, 6.92756267692272e-13, 
    5.80480522426779e-14, 4.25900898579583e-15, 2.72494277875585e-16, 
    1.51343413730632e-17, 7.26017729862871e-19, 2.99151155919971e-20, 
    1.0522122616493e-21, 3.13747348559607e-23, 7.86955059707827e-25, 
    1.64593852253977e-26, 2.84226930006646e-28, 4.00676848243835e-30, 
    4.55156238600427e-32, 4.10423808392587e-34, 2.88652514240202e-36, 
    1.55083579916786e-38, 6.20874096187073e-41, 1.79706674800529e-43, 
    3.62250627968002e-46, 4.85065602719855e-49, 4.05738601306307e-52, 
    1.95180141627321e-55, 4.80626509819071e-59, 5.08855127544539e-63, 
    1.7394128419353e-67, 1.11306738613914e-72, 3.33327034834366e-79
  };
}

// [[Rcpp::export]]
Rcpp::NumericVector dpln_rcpp(const Rcpp::IntegerVector& y,
                              const Rcpp::NumericVector& mu,
                              const Rcpp::NumericVector& sigma,
                              bool log_p = false) {
  int n_obs = y.length();
  Rcpp::NumericVector log_lik(n_obs);
  
  int mu_len = mu.length();
  int sigma_len = sigma.length();
  int K = gh_nodes.size();
  
  for (int i = 0; i < n_obs; ++i) {
    int current_y = y[i];
    // Recycle parameters according to R rules
    double current_mu = mu[i % mu_len];
    double current_sigma = sigma[i % sigma_len];
    
    if (current_sigma <= 0) {
      log_lik[i] = R_NegInf;
      continue;
    }
    
    double integral_sum = 0.0;
    
    // Gauss-Hermite Quadrature loop
    for (int k = 0; k < K; ++k) {
      double zk = gh_nodes[k];
      double wk = gh_weights[k];
      
      // The function f(z_k) to be integrated against the standard normal PDF
      double f_zk = std::exp(
        current_y * (current_mu + current_sigma * zk) - std::exp(current_mu + current_sigma * zk)
      );
      
      integral_sum += wk * f_zk;
    }
    
    // Calculate final log-probability for observation y_i
    // log(P(y)) = -lgamma(y+1) + log( integral[f(z)phi(z)dz] )
    if (integral_sum > 0) {
      log_lik[i] = -R::lgammafn(current_y + 1) + std::log(integral_sum);
    } else {
      log_lik[i] = R_NegInf;
    }
  }
  
  if (log_p) {
    return log_lik;
  } else {
    return Rcpp::exp(log_lik);
  }
}